"""Change address fields

Revision ID: 746c831787ab
Revises: 04eb0b44ff7c
Create Date: 2025-08-06 16:27:00.840514

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '746c831787ab'
down_revision: Union[str, None] = '04eb0b44ff7c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema - Adicionar novos campos de endereço."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # ✅ ADICIONAR novos campos de endereço na tabela beneficiary
    op.add_column('beneficiary', sa.Column('street', sa.String(), nullable=True, comment="Rua, Avenida, etc."))
    op.add_column('beneficiary', sa.Column('number', sa.String(), nullable=True, comment="Número da residência"))
    op.add_column('beneficiary', sa.Column('neighborhood', sa.String(), nullable=True, comment="Bairro"))
    op.add_column('beneficiary', sa.Column('city', sa.String(), nullable=True, server_default='Pindamonhangaba', comment="Cidade"))
    op.add_column('beneficiary', sa.Column('state', sa.String(), nullable=True, server_default='SP', comment="Estado"))
    op.add_column('beneficiary', sa.Column('zip_code', sa.String(), nullable=True, comment="CEP"))
    op.add_column('beneficiary', sa.Column('complement', sa.String(), nullable=True, comment="Complemento (apt, casa, etc.)"))
    
    # ✅ CRIAR índices para os novos campos
    op.create_index(op.f('ix_beneficiary_street'), 'beneficiary', ['street'], unique=False)
    op.create_index(op.f('ix_beneficiary_neighborhood'), 'beneficiary', ['neighborhood'], unique=False)
    
    # ✅ MIGRAR dados existentes do campo address para os novos campos
    # Executar SQL para migrar dados
    op.execute("""
        UPDATE beneficiary 
        SET 
            street = CASE 
                WHEN address IS NOT NULL AND address != '' THEN 
                    TRIM(SPLIT_PART(SPLIT_PART(address, '-', 1), ',', 1))
                ELSE NULL 
            END,
            neighborhood = CASE 
                WHEN address IS NOT NULL AND address != '' AND POSITION('-' IN address) > 0 THEN 
                    TRIM(SPLIT_PART(address, '-', 2))
                ELSE 'Centro'
            END,
            city = 'Pindamonhangaba',
            state = 'SP'
        WHERE address IS NOT NULL;
    """)
    
    # ✅ Para endereços com números, tentar extrair
    op.execute("""
        UPDATE beneficiary 
        SET 
            number = CASE 
                WHEN street IS NOT NULL AND street ~ '\\d+\\s*$' THEN 
                    REGEXP_REPLACE(street, '^.*?(\\d+[a-zA-Z]?)\\s*$', '\\1')
                ELSE NULL
            END,
            street = CASE 
                WHEN street IS NOT NULL AND street ~ '\\d+\\s*$' THEN 
                    TRIM(REGEXP_REPLACE(street, '\\s*\\d+[a-zA-Z]?\\s*$', ''))
                ELSE street
            END
        WHERE street IS NOT NULL;
    """)
    
    # ✅ Definir valores padrão para campos obrigatórios
    op.execute("""
        UPDATE beneficiary 
        SET 
            street = COALESCE(NULLIF(street, ''), 'Endereço não informado'),
            neighborhood = COALESCE(NULLIF(neighborhood, ''), 'Centro')
        WHERE street IS NULL OR street = '' OR neighborhood IS NULL OR neighborhood = '';
    """)


def downgrade() -> None:
    """Downgrade schema - Remover campos de endereço e restaurar address."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # ✅ ANTES de remover, restaurar o campo address com dados dos novos campos
    op.execute("""
        UPDATE beneficiary 
        SET address = CONCAT_WS(' ', 
            NULLIF(street, ''),
            CASE WHEN number IS NOT NULL AND number != '' THEN CONCAT('nº ', number) ELSE NULL END,
            CASE WHEN complement IS NOT NULL AND complement != '' THEN CONCAT('(', complement, ')') ELSE NULL END,
            CASE WHEN neighborhood IS NOT NULL AND neighborhood != '' THEN CONCAT('- ', neighborhood) ELSE NULL END
        )
        WHERE street IS NOT NULL OR neighborhood IS NOT NULL;
    """)
    
    # ✅ REMOVER índices
    op.drop_index(op.f('ix_beneficiary_neighborhood'), table_name='beneficiary')
    op.drop_index(op.f('ix_beneficiary_street'), table_name='beneficiary')
    
    # ✅ REMOVER colunas
    op.drop_column('beneficiary', 'complement')
    op.drop_column('beneficiary', 'zip_code')
    op.drop_column('beneficiary', 'state')
    op.drop_column('beneficiary', 'city')
    op.drop_column('beneficiary', 'neighborhood')
    op.drop_column('beneficiary', 'number')
    op.drop_column('beneficiary', 'street')
    
    # ### end Alembic commands ###
