"""Add beneficiary properties

Revision ID: 260395b98da4
Revises: 001_initial_migration
Create Date: 2025-06-23 16:05:14.130100

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '260395b98da4'
down_revision: Union[str, None] = '001_initial_migration'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Add new columns to beneficiary table
    op.add_column('beneficiary', sa.Column('mother_name', sa.String(), nullable=True))
    op.add_column('beneficiary', sa.Column('birth_date', sa.String(), nullable=True))
    op.add_column('beneficiary', sa.Column('qtd_dogs', sa.Integer(), server_default='0'))
    op.add_column('beneficiary', sa.Column('qtd_castred_dogs', sa.Integer(), server_default='0'))
    op.add_column('beneficiary', sa.Column('qtd_cats', sa.Integer(), server_default='0'))
    op.add_column('beneficiary', sa.Column('qtd_castred_cats', sa.Integer(), server_default='0'))
    op.add_column('beneficiary', sa.Column('government_benefit', sa.Boolean(), server_default='false'))
    op.add_column('beneficiary', sa.Column('receives_basic_basket', sa.Boolean(), server_default='false'))
    op.add_column('beneficiary', sa.Column('how_did_you_hear', sa.String(), nullable=True))
    op.add_column('beneficiary', sa.Column('observations', sa.String(), nullable=True))


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ration_input',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ration_stock_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ration_stock_id'], ['ration_stock.id'], name=op.f('ration_input_ration_stock_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ration_input_pkey'))
    )
    op.create_index(op.f('ix_ration_input_ration_stock_id'), 'ration_input', ['ration_stock_id'], unique=False)
    op.create_index(op.f('ix_ration_input_id'), 'ration_input', ['id'], unique=False)
    op.create_index(op.f('ix_ration_input_description'), 'ration_input', ['description'], unique=False)
    op.create_index(op.f('ix_ration_input_amount'), 'ration_input', ['amount'], unique=False)
    op.create_table('distribution',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ration_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('beneficiary_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['beneficiary_id'], ['beneficiary.id'], name=op.f('distribution_beneficiary_id_fkey')),
    sa.ForeignKeyConstraint(['ration_id'], ['ration_stock.id'], name=op.f('distribution_ration_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('distribution_pkey'))
    )
    op.create_index(op.f('ix_distribution_ration_id'), 'distribution', ['ration_id'], unique=False)
    op.create_index(op.f('ix_distribution_id'), 'distribution', ['id'], unique=False)
    op.create_index(op.f('ix_distribution_beneficiary_id'), 'distribution', ['beneficiary_id'], unique=False)
    op.create_index(op.f('ix_distribution_amount'), 'distribution', ['amount'], unique=False)
    op.create_table('beneficiary',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contact', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('monthly_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('beneficiary_pkey'))
    )
    op.create_index(op.f('ix_beneficiary_name'), 'beneficiary', ['name'], unique=False)
    op.create_index(op.f('ix_beneficiary_id'), 'beneficiary', ['id'], unique=False)
    op.create_index(op.f('ix_beneficiary_document'), 'beneficiary', ['document'], unique=False)
    op.create_index(op.f('ix_beneficiary_contact'), 'beneficiary', ['contact'], unique=False)
    op.create_index(op.f('ix_beneficiary_address'), 'beneficiary', ['address'], unique=False)
    op.create_table('ration_stock',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('ration_stock_pkey'))
    )
    op.create_index(op.f('ix_ration_stock_unit'), 'ration_stock', ['unit'], unique=False)
    op.create_index(op.f('ix_ration_stock_stock'), 'ration_stock', ['stock'], unique=False)
    op.create_index(op.f('ix_ration_stock_name'), 'ration_stock', ['name'], unique=True)
    op.create_index(op.f('ix_ration_stock_id'), 'ration_stock', ['id'], unique=False)
    op.create_index(op.f('ix_ration_stock_description'), 'ration_stock', ['description'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###
    # Remove the added columns in reverse order
    op.drop_column('beneficiary', 'observations')
    op.drop_column('beneficiary', 'how_did_you_hear')
    op.drop_column('beneficiary', 'receives_basic_basket')
    op.drop_column('beneficiary', 'government_benefit')
    op.drop_column('beneficiary', 'qtd_castred_cats')
    op.drop_column('beneficiary', 'qtd_cats')
    op.drop_column('beneficiary', 'qtd_castred_dogs')
    op.drop_column('beneficiary', 'qtd_dogs')
    op.drop_column('beneficiary', 'birth_date')
    op.drop_column('beneficiary', 'mother_name')
