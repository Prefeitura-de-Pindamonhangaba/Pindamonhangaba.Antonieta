import { test, expect } from '@playwright/test'
import { DashboardPage } from '../pages/DashboardPage'
import { AuthHelper } from '../helpers/authHelper'
import { DistributionModalOperator } from '../pages/DistributionModalOperator'

test.describe('Dashboard - Testes E2E', () => {
  let dashboardPage: DashboardPage

  test.beforeEach(async ({ page }) => {
    dashboardPage = new DashboardPage(page)
    
    // 1. Fazer login
    await AuthHelper.login(page)
    
    // 2. Navegar para dashboard
    await dashboardPage.navigateToDashboard()
    
    // 3. Aguardar carregamento
    await dashboardPage.waitForDataLoad()
    
    console.log('üöÄ Setup completo: Login + Navega√ß√£o para dashboard')
  })

  test('deve carregar o dashboard corretamente', async () => {
    console.log('üß™ Teste: Carregamento do dashboard')
    
    // Verificar se o dashboard carregou
    await dashboardPage.verifyDashboardLoaded()
    
    console.log('‚úÖ Dashboard carregado corretamente')
  })

  test('deve exibir todos os bot√µes de a√ß√£o', async () => {
    console.log('üß™ Teste: Bot√µes de a√ß√£o')
    
    // Verificar bot√µes de a√ß√£o
    await dashboardPage.verifyActionButtons()
    
    console.log('‚úÖ Todos os bot√µes de a√ß√£o est√£o presentes')
  })

  test('deve exibir cards de resumo com valores', async () => {
    console.log('üß™ Teste: Cards de resumo')
    
    // Verificar cards de resumo
    await dashboardPage.verifySummaryCards()
    
    // Verificar valores estat√≠sticos
    const statisticValues = await dashboardPage.verifyStatisticValues()
    
    // Verificar se todos os valores cont√™m "kg"
    expect(statisticValues).toHaveLength(3)
    statisticValues.forEach(value => {
      expect(value).toContain('kg')
    })
    
    console.log('‚úÖ Cards de resumo com valores corretos')
  })

  test('deve exibir tabela de benefici√°rios', async () => {
    console.log('üß™ Teste: Tabela de benefici√°rios')
    
    // Verificar se√ß√£o de benefici√°rios
    await dashboardPage.verifyBeneficiariesSection()
    
    // Verificar cabe√ßalhos
    const headers = await dashboardPage.verifyTableHeaders()
    
    // Verificar se tem os cabe√ßalhos essenciais
    expect(headers.length).toBeGreaterThan(0)
    
    // Contar benefici√°rios
    const rowCount = await dashboardPage.countBeneficiaryRows()
    expect(rowCount).toBeGreaterThanOrEqual(0)
    
    console.log(`‚úÖ Tabela de benefici√°rios com ${rowCount} registros`)
  })

  test('deve testar funcionalidade de busca', async () => {
    console.log('üß™ Teste: Funcionalidade de busca')
    
    // Verificar se√ß√£o primeiro
    await dashboardPage.verifyBeneficiariesSection()
    
    // Testar busca
    const searchTested = await dashboardPage.testSearchFunctionality()
    
    if (searchTested) {
      console.log('‚úÖ Funcionalidade de busca testada e funciona')
    } else {
      console.log('‚ÑπÔ∏è Busca n√£o testada devido √† falta de dados')
    }
  })

  test('deve executar teste completo do dashboard', async () => {
    console.log('üß™ Teste: Funcionalidade completa do dashboard')
    
    // Executar teste completo
    const result = await dashboardPage.performCompleteDashboardTest()
    
    // Verificar resultado
    expect(result.success).toBe(true)
    expect(result.dashboardLoaded).toBe(true)
    expect(result.actionButtonsPresent).toBe(true)
    expect(result.summaryCardsPresent).toBe(true)
    expect(result.beneficiariesSectionPresent).toBe(true)
    expect(result.statisticValues).toHaveLength(3)
    expect(result.tableHeaders.length).toBeGreaterThan(0)
    expect(result.beneficiaryCount).toBeGreaterThanOrEqual(0)
    
    console.log('üìä Resultado do teste completo:', {
      'üìã Dashboard carregado': result.dashboardLoaded ? '‚úÖ' : '‚ùå',
      'üîò Bot√µes presentes': result.actionButtonsPresent ? '‚úÖ' : '‚ùå',
      'üìä Cards presentes': result.summaryCardsPresent ? '‚úÖ' : '‚ùå',
      'üî¢ Valores estat√≠sticos': result.statisticValues.length,
      'üìà Benefici√°rios': result.beneficiaryCount,
      'üîç Busca testada': result.searchFunctionality ? '‚úÖ' : '‚ö†Ô∏è'
    })
    
    console.log('‚úÖ Teste completo do dashboard realizado com sucesso')
  })
  
  test('deve abrir o modal de distribui√ß√£o ao clicar no bot√£o de registrar sa√≠da', async () => {
    const modalOperator = new DistributionModalOperator(dashboardPage.page)
    // Clica no bot√£o de registrar sa√≠da
    await dashboardPage.page.click('button:has-text("Registrar Sa√≠da")')
    // Aguarda o modal de distribui√ß√£o aparecer usando isOpen
    expect(await modalOperator.isOpen()).toBe(true)
  })
})