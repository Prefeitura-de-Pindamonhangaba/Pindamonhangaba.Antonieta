import { test, expect } from '@playwright/test'
import { BeneficiariesPage } from '../pages/BeneficiariesPage'
import { AuthHelper } from '../helpers/authHelper'

test.describe('Benefici√°rios - Testes de Exibi√ß√£o', () => {
  let beneficiariesPage: BeneficiariesPage

  test.beforeEach(async ({ page }) => {
    beneficiariesPage = new BeneficiariesPage(page)
    
    // 1. Fazer login
    const loginSuccess = await AuthHelper.login(page)
    if (!loginSuccess) {
      throw new Error('Falha no login durante setup do teste')
    }
    
    // 2. Navegar para benefici√°rios
    await beneficiariesPage.navigateToPage()
    
    // 3. Aguardar carregamento
    await beneficiariesPage.waitForPageLoad()
    
    console.log('üöÄ Setup completo: Login + Navega√ß√£o para benefici√°rios')
  })

  test('deve carregar a p√°gina de benefici√°rios corretamente', async () => {
    console.log('üß™ Teste: Carregamento da p√°gina de benefici√°rios')
    
    // Verificar se a p√°gina carregou
    await beneficiariesPage.verifyPageLoaded()
    
    // Verificar se n√£o foi redirecionado para login
    const currentUrl = beneficiariesPage.page.url()
    expect(currentUrl).toContain('/beneficiary')
    expect(currentUrl).not.toContain('/login')
    
    console.log('‚úÖ P√°gina de benefici√°rios carregada corretamente')
  })

  test('deve exibir o t√≠tulo da p√°gina', async () => {
    console.log('üß™ Teste: T√≠tulo da p√°gina')
    
    // Verificar t√≠tulo
    const title = await beneficiariesPage.verifyPageTitle()
    
    // Se encontrou t√≠tulo, deve conter "benefici√°ri"
    if (title) {
      expect(title.toLowerCase()).toContain('benefici√°ri')
      console.log(`‚úÖ T√≠tulo correto: "${title}"`)
    } else {
      console.log('‚ö†Ô∏è T√≠tulo n√£o encontrado, mas p√°gina pode estar funcionando')
    }
  })

  test('deve exibir a tabela de benefici√°rios', async () => {
    console.log('üß™ Teste: Tabela de benefici√°rios')
    
    // Verificar se tabela existe
    const tableExists = await beneficiariesPage.verifyTableExists()
    expect(tableExists).toBe(true)
    
    // Verificar cabe√ßalhos
    const headers = await beneficiariesPage.verifyTableHeaders()
    expect(headers.length).toBeGreaterThan(0)
    
    console.log(`‚úÖ Tabela com ${headers.length} colunas encontrada`)
  })

  test('deve exibir cabe√ßalhos corretos na tabela', async () => {
    console.log('üß™ Teste: Cabe√ßalhos da tabela')
    
    // Verificar cabe√ßalhos
    const headers = await beneficiariesPage.verifyTableHeaders()
    
    expect(headers.length).toBeGreaterThan(0)
    
    // Verificar se tem pelo menos alguns cabe√ßalhos b√°sicos
    const headerText = headers.join(' ').toLowerCase()
    const hasBasicHeaders = headerText.includes('nome') || 
                           headerText.includes('documento') || 
                           headerText.includes('a√ß√µes')
    
    expect(hasBasicHeaders).toBe(true)
    
    console.log('‚úÖ Cabe√ßalhos da tabela est√£o presentes e corretos')
    console.log('üìã Cabe√ßalhos:', headers)
  })

  test('deve exibir dados na tabela ou mensagem apropriada', async () => {
    console.log('üß™ Teste: Conte√∫do da tabela')
    
    // Verificar conte√∫do
    const tableContent = await beneficiariesPage.verifyTableContent()
    
    // Tabela pode ter dados ou estar vazia - ambos s√£o v√°lidos
    if (tableContent.hasData) {
      expect(tableContent.count).toBeGreaterThan(0)
      console.log(`‚úÖ Tabela cont√©m ${tableContent.count} benefici√°rios`)
      
      if (tableContent.sampleData) {
        console.log(`üìã Exemplo de dados: ${tableContent.sampleData.substring(0, 50)}...`)
      }
    } else {
      expect(tableContent.count).toBe(0)
      console.log('‚ÑπÔ∏è Tabela vazia (comportamento v√°lido)')
    }
  })

  test('deve exibir campo de busca', async () => {
    console.log('üß™ Teste: Campo de busca')
    
    // Verificar campo de busca
    const searchExists = await beneficiariesPage.verifySearchField()
    expect(searchExists).toBe(true)
    
    console.log('‚úÖ Campo de busca presente')
  })

  test('deve testar funcionalidade b√°sica do campo de busca', async () => {
    console.log('üß™ Teste: Funcionalidade b√°sica de busca')
    
    // Testar se campo aceita texto
    const searchWorks = await beneficiariesPage.testBasicSearchFunctionality()
    expect(searchWorks).toBe(true)
    
    console.log('‚úÖ Campo de busca aceita texto e pode ser limpo')
  })

  test('deve exibir bot√µes de a√ß√£o', async () => {
    console.log('üß™ Teste: Bot√µes de a√ß√£o')
    
    // Verificar bot√µes
    const buttons = await beneficiariesPage.verifyActionButtons()
    
    // Pelo menos um bot√£o deve estar presente
    const hasAnyButton = buttons.addButton || buttons.exportButton
    expect(hasAnyButton).toBe(true)
    
    if (buttons.addButton) {
      console.log('‚úÖ Bot√£o de adicionar benefici√°rio presente')
    }
    
    if (buttons.exportButton) {
      console.log('‚úÖ Bot√£o de exportar presente')
    }
    
    console.log('‚úÖ Bot√µes de a√ß√£o verificados')
  })

  test('deve executar verifica√ß√£o completa da p√°gina', async () => {
    console.log('üß™ Teste: Verifica√ß√£o completa da p√°gina')
    
    // Executar verifica√ß√£o completa
    const result = await beneficiariesPage.performCompletePageVerification()
    
    // Verificar resultado geral
    expect(result.success).toBe(true)
    expect(result.pageLoaded).toBe(true)
    expect(result.tableExists).toBe(true)
    expect(result.tableHeaders.length).toBeGreaterThan(0)
    expect(result.searchFieldExists).toBe(true)
    
    // Pelo menos um bot√£o deve estar presente
    const hasAnyButton = result.actionButtons.addButton || result.actionButtons.exportButton
    expect(hasAnyButton).toBe(true)
    
    console.log('üìä Resultado da verifica√ß√£o completa:', {
      'üìã P√°gina carregada': result.pageLoaded ? '‚úÖ' : '‚ùå',
      'üè∑Ô∏è T√≠tulo encontrado': result.title ? '‚úÖ' : '‚ö†Ô∏è',
      'üìä Tabela presente': result.tableExists ? '‚úÖ' : '‚ùå',
      'üìë Colunas da tabela': result.tableHeaders.length,
      'üë• Benefici√°rios': result.tableContent.count,
      'üîç Campo de busca': result.searchFieldExists ? '‚úÖ' : '‚ùå',
      'üîò Bot√£o adicionar': result.actionButtons.addButton ? '‚úÖ' : '‚ö†Ô∏è',
      'üìÅ Bot√£o exportar': result.actionButtons.exportButton ? '‚úÖ' : '‚ö†Ô∏è',
      'üîç Busca funciona': result.searchFunctionality ? '‚úÖ' : '‚ö†Ô∏è'
    })
    
    console.log('‚úÖ Verifica√ß√£o completa da p√°gina realizada com sucesso')
  })

  test('deve contar benefici√°rios na tabela', async () => {
    console.log('üß™ Teste: Contagem de benefici√°rios')
    
    // Contar benefici√°rios
    const count = await beneficiariesPage.countBeneficiaries()
    
    // Pode ser 0 ou mais - ambos s√£o v√°lidos
    expect(count).toBeGreaterThanOrEqual(0)
    
    console.log(`üìä Total de benefici√°rios na tabela: ${count}`)
    
    if (count === 0) {
      console.log('‚ÑπÔ∏è Tabela vazia - estado v√°lido para sistema novo')
    } else {
      console.log(`‚úÖ Sistema cont√©m ${count} benefici√°rios cadastrados`)
    }
  })

  test('deve verificar responsividade b√°sica da p√°gina', async ({ page }) => {
    console.log('üß™ Teste: Responsividade b√°sica')
    
    // Testar em diferentes tamanhos de tela
    const viewports = [
      { width: 1920, height: 1080, name: 'Desktop' },
      { width: 768, height: 1024, name: 'Tablet' },
      { width: 375, height: 667, name: 'Mobile' }
    ]
    
    for (const viewport of viewports) {
      console.log(`üì± Testando em ${viewport.name} (${viewport.width}x${viewport.height})`)
      
      await page.setViewportSize({ width: viewport.width, height: viewport.height })
      await page.waitForTimeout(1000)
      
      // Verificar se elementos principais ainda est√£o vis√≠veis
      const tableExists = await beneficiariesPage.verifyTableExists()
      const searchExists = await beneficiariesPage.verifySearchField()
      
      console.log(`${viewport.name}: Tabela=${tableExists ? '‚úÖ' : '‚ùå'}, Busca=${searchExists ? '‚úÖ' : '‚ùå'}`)
    }
    
    console.log('‚úÖ Teste de responsividade b√°sica conclu√≠do')
  })
})