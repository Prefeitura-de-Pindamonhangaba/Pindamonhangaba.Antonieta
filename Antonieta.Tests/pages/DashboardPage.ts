import { Page, expect } from '@playwright/test'
import { BasePage } from './BasePage'

export class DashboardPage extends BasePage {
  private selectors = {
    // Header e t√≠tulo
    pageTitle: 'h1',
    
    // Action buttons
    actionButtons: {
      registerDistribution: 'button:has-text("Registrar Nova Sa√≠da")',
      registerInput: 'button:has-text("Registrar Nova Entrada")',
      addBeneficiary: 'button:has-text("Adicionar Novo Benefici√°rio")'
    },
    
    // Summary cards
    summaryCards: {
      totalInputs: '.n-card:has(.n-text:has-text("Entrada Total"))',
      totalDistributions: '.n-card:has(.n-text:has-text("Sa√≠da Total"))',
      currentStock: '.n-card:has(.n-text:has-text("Estoque Atual"))'
    },
    
    // Statistcs values
    statisticValues: '.n-statistic .n-statistic-value',
    
    // Beneficiaries table
    beneficiariesSection: '.n-card:has-text("Benefici√°rios e Controle Mensal")',
    searchField: 'input[placeholder*="Buscar por nome de benefici√°rio"]',
    dataTable: '.n-data-table',
    tableHeaders: '.n-data-table thead th',
    tableRows: '.n-data-table tbody tr',
    
    // Loading states
    pageLoading: '.n-spin',
    tableLoading: '.n-data-table .n-spin'
  }

  /**
   * Navega para a p√°gina do dashboard
   */
  async navigateToDashboard() {
    console.log('üåê Navegando para dashboard...')
    await this.navigate('/dashboard')
    await this.page.waitForLoadState('domcontentloaded')
    console.log('‚úÖ Dashboard carregado')
  }

  /**
   * Verifica se a p√°gina do dashboard carregou corretamente
   */
  async verifyDashboardLoaded() {
    console.log('üîç Verificando se o dashboard carregou...')
    
    // Verificar se estamos na URL correta
    const currentUrl = this.page.url()
    expect(currentUrl).toContain('/dashboard')
    
    // Aguardar o t√≠tulo aparecer
    await this.page.waitForSelector(this.selectors.pageTitle, { timeout: 10000 })
    const title = await this.page.textContent(this.selectors.pageTitle)
    expect(title?.toLowerCase()).toContain('dashboard')
    
    console.log('‚úÖ Dashboard carregado corretamente')
  }

  /**
   * Verifica se os bot√µes de a√ß√£o est√£o presentes
   */
  async verifyActionButtons() {
    console.log('üîç Verificando bot√µes de a√ß√£o...')
    
    // Verificar bot√£o de registrar distribui√ß√£o
    const distributionButton = await this.page.isVisible(this.selectors.actionButtons.registerDistribution)
    expect(distributionButton).toBe(true)
    console.log('‚úÖ Bot√£o "Registrar Nova Sa√≠da" presente')
    
    // Verificar bot√£o de registrar entrada
    const inputButton = await this.page.isVisible(this.selectors.actionButtons.registerInput)
    expect(inputButton).toBe(true)
    console.log('‚úÖ Bot√£o "Registrar Nova Entrada" presente')
    
    // Verificar bot√£o de adicionar benefici√°rio
    const beneficiaryButton = await this.page.isVisible(this.selectors.actionButtons.addBeneficiary)
    expect(beneficiaryButton).toBe(true)
    console.log('‚úÖ Bot√£o "Adicionar Novo Benefici√°rio" presente')
    
    console.log('‚úÖ Todos os bot√µes de a√ß√£o est√£o presentes')
  }

  /**
   * Verifica se os cards de resumo est√£o presentes
   */
  async verifySummaryCards() {
    console.log('üîç Verificando cards de resumo...')
    
    // Aguardar cards carregarem
    await this.page.waitForSelector(this.selectors.summaryCards.totalInputs, { timeout: 15000 })
    
    // Verificar card de entrada total
    const inputsCard = await this.page.isVisible(this.selectors.summaryCards.totalInputs)
    expect(inputsCard).toBe(true)
    console.log('‚úÖ Card "Entrada Total" presente')
    
    // Verificar card de sa√≠da total
    const distributionsCard = await this.page.isVisible(this.selectors.summaryCards.totalDistributions)
    expect(distributionsCard).toBe(true)
    console.log('‚úÖ Card "Sa√≠da Total" presente')
    
    // Verificar card de estoque atual
    const stockCard = await this.page.isVisible(this.selectors.summaryCards.currentStock)
    expect(stockCard).toBe(true)
    console.log('‚úÖ Card "Estoque Atual" presente')
    
    console.log('‚úÖ Todos os cards de resumo est√£o presentes')
  }

  /**
   * Verifica se os valores estat√≠sticos est√£o sendo exibidos
   */
  async verifyStatisticValues() {
    console.log('üîç Verificando valores estat√≠sticos...')
    
    // Aguardar valores carregarem
    await this.page.waitForTimeout(3000)
    
    const statisticElements = await this.page.locator(this.selectors.statisticValues).count()
    expect(statisticElements).toBe(3) // Deve ter 3 estat√≠sticas
    
    // Verificar se os valores cont√™m "kg"
    const statisticValues = await this.page.locator(this.selectors.statisticValues).allTextContents()
    
    for (let i = 0; i < statisticValues.length; i++) {
      const value = statisticValues[i]
      expect(value).toContain('kg')
      console.log(`‚úÖ Estat√≠stica ${i + 1}: ${value}`)
    }
    
    console.log('‚úÖ Valores estat√≠sticos est√£o sendo exibidos corretamente')
    return statisticValues
  }

  /**
   * Verifica se a se√ß√£o de benefici√°rios est√° presente
   */
  async verifyBeneficiariesSection() {
    console.log('üîç Verificando se√ß√£o de benefici√°rios...')
    
    // Verificar se a se√ß√£o existe
    const beneficiariesSection = await this.page.isVisible(this.selectors.beneficiariesSection)
    expect(beneficiariesSection).toBe(true)
    console.log('‚úÖ Se√ß√£o "Benefici√°rios e Controle Mensal" presente')
    
    // Verificar campo de busca
    const searchField = await this.page.isVisible(this.selectors.searchField)
    expect(searchField).toBe(true)
    console.log('‚úÖ Campo de busca presente')
    
    // Verificar tabela
    await this.page.waitForSelector(this.selectors.dataTable, { timeout: 15000 })
    const dataTable = await this.page.isVisible(this.selectors.dataTable)
    expect(dataTable).toBe(true)
    console.log('‚úÖ Tabela de benefici√°rios presente')
    
    console.log('‚úÖ Se√ß√£o de benefici√°rios est√° completa')
  }

  /**
   * Verifica os cabe√ßalhos da tabela de benefici√°rios
   */
  async verifyTableHeaders() {
    console.log('üîç Verificando cabe√ßalhos da tabela...')
    
    const headers = await this.page.locator(this.selectors.tableHeaders).allTextContents()
    console.log('üìä Cabe√ßalhos encontrados:', headers)
    
    // Verificar se tem os cabe√ßalhos esperados
    const headerText = headers.join(' ').toLowerCase()
    expect(headerText).toContain('nome')
    expect(headerText).toContain('limite')
    expect(headerText).toContain('recebido')
    expect(headerText).toContain('progresso')
    expect(headerText).toContain('status')
    
    console.log('‚úÖ Cabe√ßalhos da tabela est√£o corretos')
    return headers
  }

  /**
   * Conta as linhas da tabela de benefici√°rios
   */
  async countBeneficiaryRows() {
    console.log('üîç Contando linhas da tabela...')
    
    // Aguardar tabela carregar
    await this.page.waitForTimeout(2000)
    
    const rowCount = await this.page.locator(this.selectors.tableRows).count()
    console.log(`üìä Linhas de benefici√°rios encontradas: ${rowCount}`)
    
    return rowCount
  }

  /**
   * Testa a funcionalidade de busca
   */
  async testSearchFunctionality() {
    console.log('üîç Testando funcionalidade de busca...')
    
    // Contar linhas antes da busca
    const initialRowCount = await this.countBeneficiaryRows()
    
    if (initialRowCount > 0) {
      // Obter o nome do primeiro benefici√°rio
      const firstRowName = await this.page.locator(this.selectors.tableRows).first().locator('td').first().textContent()
      
      if (firstRowName && firstRowName.trim()) {
        // Buscar por parte do nome
        const searchTerm = firstRowName.trim().substring(0, 3)
        await this.page.fill(this.selectors.searchField, searchTerm)
        
        // Aguardar filtro aplicar
        await this.page.waitForTimeout(1000)
        
        // Verificar se ainda h√° resultados
        const filteredRowCount = await this.countBeneficiaryRows()
        console.log(`üîç Resultado da busca por "${searchTerm}": ${filteredRowCount} linhas`)
        
        // Limpar busca
        await this.page.fill(this.selectors.searchField, '')
        await this.page.waitForTimeout(1000)
        
        const resetRowCount = await this.countBeneficiaryRows()
        expect(resetRowCount).toBe(initialRowCount)
        
        console.log('‚úÖ Funcionalidade de busca est√° funcionando')
        return true
      }
    }
    
    console.log('‚ÑπÔ∏è Busca n√£o testada (sem dados ou dados insuficientes)')
    return false
  }

  /**
   * Verifica se a p√°gina est√° carregando dados
   */
  async waitForDataLoad() {
    console.log('‚è≥ Aguardando carregamento de dados...')
    
    // Aguardar loading desaparecer
    try {
      await this.page.waitForSelector(this.selectors.pageLoading, { 
        state: 'hidden', 
        timeout: 30000 
      })
      console.log('‚úÖ Loading da p√°gina finalizado')
    } catch (error) {
      console.log('‚ÑπÔ∏è Nenhum loading da p√°gina detectado')
    }
    
    // Aguardar loading da tabela desaparecer
    try {
      await this.page.waitForSelector(this.selectors.tableLoading, { 
        state: 'hidden', 
        timeout: 15000 
      })
      console.log('‚úÖ Loading da tabela finalizado')
    } catch (error) {
      console.log('‚ÑπÔ∏è Nenhum loading da tabela detectado')
    }
    
    // Aguardar estabiliza√ß√£o da rede
    await this.page.waitForLoadState('networkidle', { timeout: 15000 })
    console.log('‚úÖ Rede estabilizada')
  }

  /**
   * Executa teste completo do dashboard
   */
  async performCompleteDashboardTest() {
    console.log('üß™ Iniciando teste completo do dashboard...')
    
    try {
      // 1. Navegar para dashboard
      await this.navigateToDashboard()
      
      // 2. Aguardar carregamento
      await this.waitForDataLoad()
      
      // 3. Verificar se p√°gina carregou
      await this.verifyDashboardLoaded()
      
      // 4. Verificar bot√µes de a√ß√£o
      await this.verifyActionButtons()
      
      // 5. Verificar cards de resumo
      await this.verifySummaryCards()
      
      // 6. Verificar valores estat√≠sticos
      const statisticValues = await this.verifyStatisticValues()
      
      // 7. Verificar se√ß√£o de benefici√°rios
      await this.verifyBeneficiariesSection()
      
      // 8. Verificar cabe√ßalhos da tabela
      const headers = await this.verifyTableHeaders()
      
      // 9. Contar benefici√°rios
      const rowCount = await this.countBeneficiaryRows()
      
      // 10. Testar busca (se houver dados)
      const searchTested = await this.testSearchFunctionality()
      
      console.log('‚úÖ Teste completo do dashboard conclu√≠do com sucesso!')
      
      return {
        success: true,
        dashboardLoaded: true,
        actionButtonsPresent: true,
        summaryCardsPresent: true,
        statisticValues,
        beneficiariesSectionPresent: true,
        tableHeaders: headers,
        beneficiaryCount: rowCount,
        searchFunctionality: searchTested
      }
      
    } catch (error) {
      console.error('‚ùå Erro no teste do dashboard:', error)
      throw error
    }
  }
}